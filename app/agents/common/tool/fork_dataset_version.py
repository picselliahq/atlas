from agents.common.tool.mcp_tool import BaseMCPTool
from services.context import ContextService


class CreateNewDatasetVersion(BaseMCPTool):
    name = "create_new_dataset_version"
    description = """
    Create a new DatasetVersion from the working Dataset, you can chose to create a new version
    with the annotations, with the annotations and tags, with the labels initialized, or with nothing
    The default config will create a new dataset version with everything from the initial version.
    """
    inputs = {
        "mode": {
            "type": "string",
            "description": "mode='deep-copy' copy all the information / mode='soft-copy' copy labels without the annotations, mode='images' to only copy images",
            "nullable": "false",
        },
        "version_name": {
            "type": "string",
            "description": "Name of the new version, should always start by Atlas-NAME-version",
            "nullable": "false",
        },
    }
    output_type = "string"

    def __init__(self, context: ContextService):
        super().__init__(context)

    def forward(self, mode: str = "deep-copy", version_name: str | None = None) -> str:
        with_tags = True
        version_name = version_name
        with_labels = True
        with_annotations = True

        if mode == "soft-copy":
            with_annotations = False

        if mode == "image":
            with_labels = False
            with_annotations = False

        new_version, job = self.dataset_version.fork(
            version=version_name,
            description=f"New version of {self.dataset_version.version} generated by Atlas.",
            with_tags=with_tags,
            with_annotations=with_annotations,
            with_labels=with_labels,
            wait=True,
            type=self.dataset_version.type,
        )
        return f"New version created, dataset_version_id: {new_version.id}, accessible at url: {new_version.get_resource_url_on_platform()}"
